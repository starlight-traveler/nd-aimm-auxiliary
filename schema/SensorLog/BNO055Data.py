# automatically generated by the FlatBuffers compiler, do not modify

# namespace: SensorLog

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class BNO055Data(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BNO055Data()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsBNO055Data(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # BNO055Data
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # BNO055Data
    def AccelX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # BNO055Data
    def AccelY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # BNO055Data
    def AccelZ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # BNO055Data
    def MagX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # BNO055Data
    def MagY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # BNO055Data
    def MagZ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # BNO055Data
    def GyroX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # BNO055Data
    def GyroY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # BNO055Data
    def GyroZ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # BNO055Data
    def EulerHeading(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # BNO055Data
    def EulerRoll(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # BNO055Data
    def EulerPitch(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # BNO055Data
    def LinearAccelX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # BNO055Data
    def LinearAccelY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # BNO055Data
    def LinearAccelZ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # BNO055Data
    def GravityX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # BNO055Data
    def GravityY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # BNO055Data
    def GravityZ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # BNO055Data
    def CalibrationStatusSystem(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # BNO055Data
    def CalibrationStatusGyro(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # BNO055Data
    def CalibrationStatusAccel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # BNO055Data
    def CalibrationStatusMag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def BNO055DataStart(builder):
    builder.StartObject(22)

def Start(builder):
    BNO055DataStart(builder)

def BNO055DataAddAccelX(builder, accelX):
    builder.PrependFloat32Slot(0, accelX, 0.0)

def AddAccelX(builder, accelX):
    BNO055DataAddAccelX(builder, accelX)

def BNO055DataAddAccelY(builder, accelY):
    builder.PrependFloat32Slot(1, accelY, 0.0)

def AddAccelY(builder, accelY):
    BNO055DataAddAccelY(builder, accelY)

def BNO055DataAddAccelZ(builder, accelZ):
    builder.PrependFloat32Slot(2, accelZ, 0.0)

def AddAccelZ(builder, accelZ):
    BNO055DataAddAccelZ(builder, accelZ)

def BNO055DataAddMagX(builder, magX):
    builder.PrependFloat32Slot(3, magX, 0.0)

def AddMagX(builder, magX):
    BNO055DataAddMagX(builder, magX)

def BNO055DataAddMagY(builder, magY):
    builder.PrependFloat32Slot(4, magY, 0.0)

def AddMagY(builder, magY):
    BNO055DataAddMagY(builder, magY)

def BNO055DataAddMagZ(builder, magZ):
    builder.PrependFloat32Slot(5, magZ, 0.0)

def AddMagZ(builder, magZ):
    BNO055DataAddMagZ(builder, magZ)

def BNO055DataAddGyroX(builder, gyroX):
    builder.PrependFloat32Slot(6, gyroX, 0.0)

def AddGyroX(builder, gyroX):
    BNO055DataAddGyroX(builder, gyroX)

def BNO055DataAddGyroY(builder, gyroY):
    builder.PrependFloat32Slot(7, gyroY, 0.0)

def AddGyroY(builder, gyroY):
    BNO055DataAddGyroY(builder, gyroY)

def BNO055DataAddGyroZ(builder, gyroZ):
    builder.PrependFloat32Slot(8, gyroZ, 0.0)

def AddGyroZ(builder, gyroZ):
    BNO055DataAddGyroZ(builder, gyroZ)

def BNO055DataAddEulerHeading(builder, eulerHeading):
    builder.PrependFloat32Slot(9, eulerHeading, 0.0)

def AddEulerHeading(builder, eulerHeading):
    BNO055DataAddEulerHeading(builder, eulerHeading)

def BNO055DataAddEulerRoll(builder, eulerRoll):
    builder.PrependFloat32Slot(10, eulerRoll, 0.0)

def AddEulerRoll(builder, eulerRoll):
    BNO055DataAddEulerRoll(builder, eulerRoll)

def BNO055DataAddEulerPitch(builder, eulerPitch):
    builder.PrependFloat32Slot(11, eulerPitch, 0.0)

def AddEulerPitch(builder, eulerPitch):
    BNO055DataAddEulerPitch(builder, eulerPitch)

def BNO055DataAddLinearAccelX(builder, linearAccelX):
    builder.PrependFloat32Slot(12, linearAccelX, 0.0)

def AddLinearAccelX(builder, linearAccelX):
    BNO055DataAddLinearAccelX(builder, linearAccelX)

def BNO055DataAddLinearAccelY(builder, linearAccelY):
    builder.PrependFloat32Slot(13, linearAccelY, 0.0)

def AddLinearAccelY(builder, linearAccelY):
    BNO055DataAddLinearAccelY(builder, linearAccelY)

def BNO055DataAddLinearAccelZ(builder, linearAccelZ):
    builder.PrependFloat32Slot(14, linearAccelZ, 0.0)

def AddLinearAccelZ(builder, linearAccelZ):
    BNO055DataAddLinearAccelZ(builder, linearAccelZ)

def BNO055DataAddGravityX(builder, gravityX):
    builder.PrependFloat32Slot(15, gravityX, 0.0)

def AddGravityX(builder, gravityX):
    BNO055DataAddGravityX(builder, gravityX)

def BNO055DataAddGravityY(builder, gravityY):
    builder.PrependFloat32Slot(16, gravityY, 0.0)

def AddGravityY(builder, gravityY):
    BNO055DataAddGravityY(builder, gravityY)

def BNO055DataAddGravityZ(builder, gravityZ):
    builder.PrependFloat32Slot(17, gravityZ, 0.0)

def AddGravityZ(builder, gravityZ):
    BNO055DataAddGravityZ(builder, gravityZ)

def BNO055DataAddCalibrationStatusSystem(builder, calibrationStatusSystem):
    builder.PrependInt8Slot(18, calibrationStatusSystem, 0)

def AddCalibrationStatusSystem(builder, calibrationStatusSystem):
    BNO055DataAddCalibrationStatusSystem(builder, calibrationStatusSystem)

def BNO055DataAddCalibrationStatusGyro(builder, calibrationStatusGyro):
    builder.PrependInt8Slot(19, calibrationStatusGyro, 0)

def AddCalibrationStatusGyro(builder, calibrationStatusGyro):
    BNO055DataAddCalibrationStatusGyro(builder, calibrationStatusGyro)

def BNO055DataAddCalibrationStatusAccel(builder, calibrationStatusAccel):
    builder.PrependInt8Slot(20, calibrationStatusAccel, 0)

def AddCalibrationStatusAccel(builder, calibrationStatusAccel):
    BNO055DataAddCalibrationStatusAccel(builder, calibrationStatusAccel)

def BNO055DataAddCalibrationStatusMag(builder, calibrationStatusMag):
    builder.PrependInt8Slot(21, calibrationStatusMag, 0)

def AddCalibrationStatusMag(builder, calibrationStatusMag):
    BNO055DataAddCalibrationStatusMag(builder, calibrationStatusMag)

def BNO055DataEnd(builder):
    return builder.EndObject()

def End(builder):
    return BNO055DataEnd(builder)
