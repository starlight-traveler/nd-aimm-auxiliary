# automatically generated by the FlatBuffers compiler, do not modify

# namespace: SensorLog

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ENS160Data(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ENS160Data()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsENS160Data(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ENS160Data
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ENS160Data
    def Aqi(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ENS160Data
    def Tvoc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ENS160Data
    def Eco2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ENS160Data
    def Hp0(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ENS160Data
    def Hp1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ENS160Data
    def Hp2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ENS160Data
    def Hp3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def ENS160DataStart(builder):
    builder.StartObject(7)

def Start(builder):
    ENS160DataStart(builder)

def ENS160DataAddAqi(builder, aqi):
    builder.PrependInt32Slot(0, aqi, 0)

def AddAqi(builder, aqi):
    ENS160DataAddAqi(builder, aqi)

def ENS160DataAddTvoc(builder, tvoc):
    builder.PrependInt32Slot(1, tvoc, 0)

def AddTvoc(builder, tvoc):
    ENS160DataAddTvoc(builder, tvoc)

def ENS160DataAddEco2(builder, eco2):
    builder.PrependInt32Slot(2, eco2, 0)

def AddEco2(builder, eco2):
    ENS160DataAddEco2(builder, eco2)

def ENS160DataAddHp0(builder, hp0):
    builder.PrependFloat32Slot(3, hp0, 0.0)

def AddHp0(builder, hp0):
    ENS160DataAddHp0(builder, hp0)

def ENS160DataAddHp1(builder, hp1):
    builder.PrependFloat32Slot(4, hp1, 0.0)

def AddHp1(builder, hp1):
    ENS160DataAddHp1(builder, hp1)

def ENS160DataAddHp2(builder, hp2):
    builder.PrependFloat32Slot(5, hp2, 0.0)

def AddHp2(builder, hp2):
    ENS160DataAddHp2(builder, hp2)

def ENS160DataAddHp3(builder, hp3):
    builder.PrependFloat32Slot(6, hp3, 0.0)

def AddHp3(builder, hp3):
    ENS160DataAddHp3(builder, hp3)

def ENS160DataEnd(builder):
    return builder.EndObject()

def End(builder):
    return ENS160DataEnd(builder)
