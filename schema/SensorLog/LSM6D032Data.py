# automatically generated by the FlatBuffers compiler, do not modify

# namespace: SensorLog

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class LSM6D032Data(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LSM6D032Data()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLSM6D032Data(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # LSM6D032Data
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # LSM6D032Data
    def AccelX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # LSM6D032Data
    def AccelY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # LSM6D032Data
    def AccelZ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # LSM6D032Data
    def GyroX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # LSM6D032Data
    def GyroY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # LSM6D032Data
    def GyroZ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def LSM6D032DataStart(builder):
    builder.StartObject(6)

def Start(builder):
    LSM6D032DataStart(builder)

def LSM6D032DataAddAccelX(builder, accelX):
    builder.PrependFloat32Slot(0, accelX, 0.0)

def AddAccelX(builder, accelX):
    LSM6D032DataAddAccelX(builder, accelX)

def LSM6D032DataAddAccelY(builder, accelY):
    builder.PrependFloat32Slot(1, accelY, 0.0)

def AddAccelY(builder, accelY):
    LSM6D032DataAddAccelY(builder, accelY)

def LSM6D032DataAddAccelZ(builder, accelZ):
    builder.PrependFloat32Slot(2, accelZ, 0.0)

def AddAccelZ(builder, accelZ):
    LSM6D032DataAddAccelZ(builder, accelZ)

def LSM6D032DataAddGyroX(builder, gyroX):
    builder.PrependFloat32Slot(3, gyroX, 0.0)

def AddGyroX(builder, gyroX):
    LSM6D032DataAddGyroX(builder, gyroX)

def LSM6D032DataAddGyroY(builder, gyroY):
    builder.PrependFloat32Slot(4, gyroY, 0.0)

def AddGyroY(builder, gyroY):
    LSM6D032DataAddGyroY(builder, gyroY)

def LSM6D032DataAddGyroZ(builder, gyroZ):
    builder.PrependFloat32Slot(5, gyroZ, 0.0)

def AddGyroZ(builder, gyroZ):
    LSM6D032DataAddGyroZ(builder, gyroZ)

def LSM6D032DataEnd(builder):
    return builder.EndObject()

def End(builder):
    return LSM6D032DataEnd(builder)
