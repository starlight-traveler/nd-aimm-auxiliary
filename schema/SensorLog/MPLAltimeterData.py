# automatically generated by the FlatBuffers compiler, do not modify

# namespace: SensorLog

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MPLAltimeterData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MPLAltimeterData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMPLAltimeterData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MPLAltimeterData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MPLAltimeterData
    def Pressure(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # MPLAltimeterData
    def Altitude(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def MPLAltimeterDataStart(builder):
    builder.StartObject(2)

def Start(builder):
    MPLAltimeterDataStart(builder)

def MPLAltimeterDataAddPressure(builder, pressure):
    builder.PrependFloat32Slot(0, pressure, 0.0)

def AddPressure(builder, pressure):
    MPLAltimeterDataAddPressure(builder, pressure)

def MPLAltimeterDataAddAltitude(builder, altitude):
    builder.PrependFloat32Slot(1, altitude, 0.0)

def AddAltitude(builder, altitude):
    MPLAltimeterDataAddAltitude(builder, altitude)

def MPLAltimeterDataEnd(builder):
    return builder.EndObject()

def End(builder):
    return MPLAltimeterDataEnd(builder)
